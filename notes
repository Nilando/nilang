VERSION 0.1.0

TODO:
- turn program into loaded program
- load 'loaded program' into VM
- create VM dispatch loop

BACKLOG:
- Modular Intrinsic functions
- Memory SSA
- Jump threading pass
- Loop Invariant Code Motion
- String Interpolation
- For loops on strings, lists, and maps
- importing and exporting
- Peephole pass
- AST pass

GOALS
- complete AOC 2025 with this language
- learn about compilers and interpreters
- have fun

ABOVE AND BEYOND
- async execution
- debugger

DECEMBER -> COMPLETE AOC
NOVEMBER
OCTOBER
AUGUST
JULY
JUNE

MAY
- dead code elimination
- global value numbering pass 
- register allocation
- first draft of bytecode
- TAC Updates: 
  - Var -> VReg (much smaller!)
- testing via golden files
- beginning to draft out runtime/VM

APRIL
- implemented CFG creation from TAC
- implemented converting CFG to SSA form
- added boolean shortcircuiting
- symbol map can convert 2 ways
- completed escape DFA
- CFG printing and graph vizualization

MARCH
- refactored the lexer to be much more functional
- completely redesigned the parser by using parser combinators
  - this gave a huge improvement in readability
- started redesign of the TAC generator
