VERSION 0.1.0

FEATURE BACKLOG:
- backtraces
- auto binding of functions with "self" arg
- add push and pop operators
- standard library and "monkey patch" intrinsics
- String Interpolation
- save assigned vars in repl
- fix major collection bug (sandpit)
- add FFI
- LSP?

OPTIMIZATION BACKLOG:
- add benchmarking
- GC updates:
  - GcSync derive (reduce allocating callframes)
  - view option (helps with printing)
- string internment
- Memory SSA
- Jump threading pass
- Loop Invariant Code Motion
- Peephole pass
- AST pass
- JIT?

GOALS
- complete AOC 2025 with this language
- learn about compilers and interpreters
- have fun

DECEMBER -> COMPLETE AOC
NOVEMBER
OCTOBER
SEPTEMBER

AUGUST
- changed how intrinsic functions work
- reorganized some code
- added more tests and examples

JULY
- made an initial draft of intrinsic functions to add
- added partial functions
- implemented top level intrinsic functions
- implemented num intrinsics
- rough draft of importing/exporting

JUNE
- ran first program, and many more
- added intrinsic functions
- added 'pretty' runtime errors
- added lists, strings, closures, & hash maps, and more!
- ran some successful concurrent GC tests
- added global variables

MAY
- dead code elimination
- global value numbering pass 
- register allocation
- first draft of bytecode
- tac updates: 
  - var -> vreg (much smaller!)
- testing via golden files
- beginning to draft out runtime/vm

APRIL
- implemented cfg creation from tac
- implemented converting cfg to ssa form
- added boolean shortcircuiting
- symbol map can convert 2 ways
- completed escape dfa
- cfg printing and graph vizualization

MARCH
- refactored the lexer to be much more functional
- completely redesigned the parser by using parser combinators
  - this gave a huge improvement in readability
- started redesign of the tac generator
